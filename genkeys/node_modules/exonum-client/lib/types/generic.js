'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.newType = newType;
exports.isInstanceofOfNewType = isInstanceofOfNewType;

var _serialization = require('./serialization');

var serialization = _interopRequireWildcard(_serialization);

var _crypto = require('../crypto');

var crypto = _interopRequireWildcard(_crypto);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @constructor
 * @param {Object} type
 */
var NewType = function () {
    function NewType(type) {
        _classCallCheck(this, NewType);

        this.size = type.size;
        this.fields = type.fields;
    }

    /**
     * Serialize data of NewType type into array of 8-bit integers
     * @param {Object} data
     * @returns {Array}
     */


    _createClass(NewType, [{
        key: 'serialize',
        value: function serialize(data) {
            return serialization.serialize([], 0, data, this);
        }

        /**
         * Get SHA256 hash
         * @param {Object} data
         * @returns {string}
         */

    }, {
        key: 'hash',
        value: function hash(data) {
            return crypto.hash(data, this);
        }

        /**
         * Get ED25519 signature
         * @param {string} secretKey
         * @param {Object} data
         * @returns {string}
         */

    }, {
        key: 'sign',
        value: function sign(secretKey, data) {
            return crypto.sign(secretKey, data, this);
        }

        /**
         * Verifies ED25519 signature
         * @param {string} signature
         * @param {string} publicKey
         * @param {Object} data
         * @returns {boolean}
         */

    }, {
        key: 'verifySignature',
        value: function verifySignature(signature, publicKey, data) {
            return crypto.verifySignature(signature, publicKey, data, this);
        }
    }]);

    return NewType;
}();

/**
 * Create element of NewType class
 * @param {Object} type
 * @returns {NewType}
 */


function newType(type) {
    return new NewType(type);
}

/**
 * Check if passed object is of type NewType
 * @param {Object} type
 * @returns {boolean}
 */
function isInstanceofOfNewType(type) {
    return type instanceof NewType;
}
